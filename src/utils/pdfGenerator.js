import jsPDF from 'jspdf';
import 'jspdf-autotable';

export const generateLedgerPDF = (ledgerData, accountInfo, balance, dateRange) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Company Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Business Management System', pageWidth / 2, 20, { align: 'center' });
  
  doc.setFontSize(16);
  doc.text('Account Ledger Report', pageWidth / 2, 30, { align: 'center' });
  
  // Account and Date Information
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Account: ${accountInfo.label}`, 20, 45);
  doc.text(`Period: ${dateRange.from} to ${dateRange.to}`, 20, 55);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 65);
  
  // Opening Balance
  doc.setFont('helvetica', 'bold');
  doc.text(`Opening Balance: ₹${balance.opening.toLocaleString()}`, 20, 80);
  
  // Ledger Table
  const tableColumns = [
    { header: 'Date', dataKey: 'date' },
    { header: 'Particulars', dataKey: 'particulars' },
    { header: 'Voucher No.', dataKey: 'voucher_no' },
    { header: 'Debit (₹)', dataKey: 'debit' },
    { header: 'Credit (₹)', dataKey: 'credit' },
    { header: 'Balance (₹)', dataKey: 'balance' }
  ];
  
  // Calculate running balance for each row
  let runningBalance = balance.opening;
  const tableData = ledgerData.map((row, index) => {
    runningBalance += (row.debit - row.credit);
    return {
      date: new Date(row.date).toLocaleDateString(),
      particulars: row.particulars,
      voucher_no: row.voucher_no,
      debit: row.debit ? row.debit.toLocaleString() : '-',
      credit: row.credit ? row.credit.toLocaleString() : '-',
      balance: runningBalance.toLocaleString()
    };
  });
  
  doc.autoTable({
    columns: tableColumns,
    body: tableData,
    startY: 90,
    styles: {
      fontSize: 10,
      cellPadding: 3,
    },
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontStyle: 'bold'
    },
    alternateRowStyles: {
      fillColor: [245, 245, 245]
    },
    columnStyles: {
      3: { halign: 'right' }, // Debit column
      4: { halign: 'right' }, // Credit column
      5: { halign: 'right' }  // Balance column
    }
  });
  
  // Summary Section
  const finalY = doc.lastAutoTable.finalY + 20;
  
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.text('Summary:', 20, finalY);
  
  doc.setFont('helvetica', 'normal');
  doc.text(`Total Debit: ₹${balance.debit.toLocaleString()}`, 20, finalY + 15);
  doc.text(`Total Credit: ₹${balance.credit.toLocaleString()}`, 20, finalY + 25);
  doc.text(`Closing Balance: ₹${Math.abs(balance.closing).toLocaleString()} ${balance.closing >= 0 ? 'Dr' : 'Cr'}`, 20, finalY + 35);
  
  // Footer
  const pageHeight = doc.internal.pageSize.height;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by Business Management System', pageWidth / 2, pageHeight - 10, { align: 'center' });
  
  return doc;
};

export const generateTrialBalancePDF = (trialBalanceData, dateRange) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  
  // Company Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Business Management System', pageWidth / 2, 20, { align: 'center' });
  
  doc.setFontSize(16);
  doc.text('Trial Balance', pageWidth / 2, 30, { align: 'center' });
  
  // Date Information
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`As on: ${dateRange.to}`, pageWidth / 2, 45, { align: 'center' });
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 60);
  
  // Trial Balance Table
  const tableColumns = [
    { header: 'Account Name', dataKey: 'account' },
    { header: 'Debit (₹)', dataKey: 'debit' },
    { header: 'Credit (₹)', dataKey: 'credit' }
  ];
  
  const tableData = trialBalanceData.map(row => ({
    account: row.account,
    debit: row.debit ? row.debit.toLocaleString() : '-',
    credit: row.credit ? row.credit.toLocaleString() : '-'
  }));
  
  // Calculate totals
  const totalDebit = trialBalanceData.reduce((sum, row) => sum + (row.debit || 0), 0);
  const totalCredit = trialBalanceData.reduce((sum, row) => sum + (row.credit || 0), 0);
  
  // Add totals row
  tableData.push({
    account: 'TOTAL',
    debit: totalDebit.toLocaleString(),
    credit: totalCredit.toLocaleString()
  });
  
  doc.autoTable({
    columns: tableColumns,
    body: tableData,
    startY: 75,
    styles: {
      fontSize: 11,
      cellPadding: 4,
    },
    headStyles: {
      fillColor: [41, 128, 185],
      textColor: 255,
      fontStyle: 'bold'
    },
    columnStyles: {
      1: { halign: 'right' }, // Debit column
      2: { halign: 'right' }  // Credit column
    },
    didParseCell: function (data) {
      // Style the total row
      if (data.row.index === tableData.length - 1) {
        data.cell.styles.fontStyle = 'bold';
        data.cell.styles.fillColor = [230, 230, 230];
      }
    }
  });
  
  // Footer
  const pageHeight = doc.internal.pageSize.height;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by Business Management System', pageWidth / 2, pageHeight - 10, { align: 'center' });
  
  return doc;
};

export const downloadPDF = (doc, filename) => {
  doc.save(filename);
};

export const previewPDF = (doc) => {
  const pdfBlob = doc.output('blob');
  const pdfUrl = URL.createObjectURL(pdfBlob);
  window.open(pdfUrl, '_blank');
};
